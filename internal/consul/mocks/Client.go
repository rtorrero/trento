// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/consul/api"
	mock "github.com/stretchr/testify/mock"
	consul "github.com/trento-project/trento/internal/consul"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AcquireLockKey provides a mock function with given fields: prefix
func (_m *Client) AcquireLockKey(prefix string) (*api.Lock, error) {
	ret := _m.Called(prefix)

	var r0 *api.Lock
	if rf, ok := ret.Get(0).(func(string) *api.Lock); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Lock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Agent provides a mock function with given fields:
func (_m *Client) Agent() consul.Agent {
	ret := _m.Called()

	var r0 consul.Agent
	if rf, ok := ret.Get(0).(func() consul.Agent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consul.Agent)
		}
	}

	return r0
}

// Catalog provides a mock function with given fields:
func (_m *Client) Catalog() consul.Catalog {
	ret := _m.Called()

	var r0 consul.Catalog
	if rf, ok := ret.Get(0).(func() consul.Catalog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consul.Catalog)
		}
	}

	return r0
}

// Health provides a mock function with given fields:
func (_m *Client) Health() consul.Health {
	ret := _m.Called()

	var r0 consul.Health
	if rf, ok := ret.Get(0).(func() consul.Health); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consul.Health)
		}
	}

	return r0
}

// KV provides a mock function with given fields:
func (_m *Client) KV() consul.KV {
	ret := _m.Called()

	var r0 consul.KV
	if rf, ok := ret.Get(0).(func() consul.KV); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(consul.KV)
		}
	}

	return r0
}

// WaitLock provides a mock function with given fields: prefix
func (_m *Client) WaitLock(prefix string) error {
	ret := _m.Called(prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
