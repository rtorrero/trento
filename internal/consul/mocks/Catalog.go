// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/consul/api"

	mock "github.com/stretchr/testify/mock"
)

// Catalog is an autogenerated mock type for the Catalog type
type Catalog struct {
	mock.Mock
}

// Datacenters provides a mock function with given fields:
func (_m *Catalog) Datacenters() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Node provides a mock function with given fields: node, q
func (_m *Catalog) Node(node string, q *api.QueryOptions) (*api.CatalogNode, *api.QueryMeta, error) {
	ret := _m.Called(node, q)

	var r0 *api.CatalogNode
	if rf, ok := ret.Get(0).(func(string, *api.QueryOptions) *api.CatalogNode); ok {
		r0 = rf(node, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CatalogNode)
		}
	}

	var r1 *api.QueryMeta
	if rf, ok := ret.Get(1).(func(string, *api.QueryOptions) *api.QueryMeta); ok {
		r1 = rf(node, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *api.QueryOptions) error); ok {
		r2 = rf(node, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Nodes provides a mock function with given fields: q
func (_m *Catalog) Nodes(q *api.QueryOptions) ([]*api.Node, *api.QueryMeta, error) {
	ret := _m.Called(q)

	var r0 []*api.Node
	if rf, ok := ret.Get(0).(func(*api.QueryOptions) []*api.Node); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Node)
		}
	}

	var r1 *api.QueryMeta
	if rf, ok := ret.Get(1).(func(*api.QueryOptions) *api.QueryMeta); ok {
		r1 = rf(q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*api.QueryOptions) error); ok {
		r2 = rf(q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
