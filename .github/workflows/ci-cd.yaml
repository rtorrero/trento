name: Continous Integration and Demo Deployment
on:
  push:
    tags-ignore:
      - '*'
    branches:
      - 'main'
  pull_request:
  release:
    types: [published]

env:
  PACKAGE_NAME: trento
  FOLDER: packaging/suse
  REPOSITORY: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trento_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: get git tags
        run: git fetch --prune --unshallow --tags
      - name: install-mockery
        run: go install github.com/vektra/mockery/v2
      - name: test
        env:
          DB_PORT: 5432
        run: make test
      - name: static analysis
        run: make vet-check
      - name: coding styles
        run: make fmt-check
      - name: frontend lint and coding style check
        run: make web-check
      - name: ansible playbooks and roles lint check
        run: |
          pip install ansible==4.6.0 ansible-core==2.11.5 ansible-lint==5.1.3 ara==1.5.7
          export ANSIBLE_ACTION_PLUGINS=$(python3 -m ara.setup.action_plugins)
          ansible-lint -vv -x role-name,risky-shell-pipe,no-tabs -w yaml \
            runner/ansible/* runner/ansible/roles/* \
            runner/ansible/roles/checks/* runner/ansible/vars/*
      - name: trento checks sanity test
        run: |
          pip install PyYAML
          python3 hack/id_checker.py

  build-static-binary:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: build
        run: make -j4 cross-compiled
      - name: compress
        run: |
          set -x
          find ./build -maxdepth 1 -mindepth 1 -type d -exec sh -c 'tar -zcf build/trento-$(basename {}).tgz -C {} trento -C $(pwd) packaging/systemd/trento-agent.service' \;
      - uses: actions/upload-artifact@v2
        with:
          name: trento-binaries
          path: |
                  build/trento-amd64.tgz
                  build/trento-arm64.tgz
                  build/trento-ppc64le.tgz
                  build/trento-s390x.tgz

  release-rolling:
    needs: build-static-binary
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: trento-binaries
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "rolling"
          prerelease: true
          title: "Cutting Edge"
          files: |
            trento-amd64.tgz
            trento-arm64.tgz
            trento-ppc64le.tgz
            trento-s390x.tgz

  # This job doesn't actually make release, but rather reacts to a manual one, made via the GitHub UI.
  # In the future, we might want to reuse the same mechanism of the rolling ones to automate everything here as well.
  release-tag:
    needs: build-static-binary
    if: github.event.release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: trento-binaries
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: "trento-*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  deploy-server:
    runs-on: [ self-hosted, trento-gh-runner ]
    needs: [ build-and-push-container-images, release-rolling ]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    environment: AZURE_DEMO
    env:
      TRENTO_SERVER_HOST: ${{ secrets.TRENTO_SERVER_HOST }}
      TRENTO_USER: ${{ secrets.TRENTO_USER }}
      TRENTO_REPO_OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v2
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: unnecessary
          if_key_exists: replace
          config: ${{ secrets.SSH_CONFIG }}
      - name: deploy trento services on K3S cluster
        run: ssh "$TRENTO_USER@$TRENTO_SERVER_HOST" "TRENTO_REPO_OWNER=$TRENTO_REPO_OWNER sudo --preserve-env=PATH,TRENTO_REPO_OWNER bash -s" -- < ./install-server.sh -r -p ~/.ssh/id_rsa

  deploy-agents:
    runs-on: [ self-hosted, trento-gh-runner ]
    needs: [ deploy-server ]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    environment: AZURE_DEMO
    env:
      TRENTO_AGENT_HOSTS: ${{ secrets.TRENTO_AGENT_HOSTS }}
      TRENTO_USER: ${{ secrets.TRENTO_USER }}
      TRENTO_SERVER_HOST: ${{ secrets.TRENTO_SERVER_HOST }}
      TRENTO_REPO_OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v2
      - name: install and enable agents
        run: |
          set -ex
          for target_host in ${TRENTO_AGENT_HOSTS//,/ }
          do
            ssh "$TRENTO_USER@$target_host" "TRENTO_REPO_OWNER=$TRENTO_REPO_OWNER sudo --preserve-env=PATH,TRENTO_REPO_OWNER bash -s" -- < ./install-agent.sh "--rolling" "--use-tgz" "--agent-bind-ip" "$target_host" "--server-ip" "$TRENTO_SERVER_HOST"
            ssh "$TRENTO_USER@$target_host" "sudo systemctl enable --now trento-agent.service"
          done

  build-and-push-container-images:
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        image-target:
          - trento-web
          - trento-runner
    env:
      REGISTRY: ghcr.io
      IMAGE_REPOSITORY: ghcr.io/${{ github.repository_owner }}/${{ matrix.image-target }}
      IMAGE_TAG: "${{ github.event_name == 'release' && github.event.release.tag_name || 'rolling' }}"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.IMAGE_REPOSITORY }}
      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          target: ${{ matrix.image-target }}
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  obs-commit:
    needs: test
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
      env:
        OBS_USER: ${{ secrets.OBS_USER }}
        OBS_PASS: ${{ secrets.OBS_PASS }}
        OBS_PROJECT: ${{ secrets.OBS_PROJECT }}        
        GITHUB_OAUTH_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: configure OSC
    # OSC credentials must be configured beforehand as the HOME variables cannot be changed from /github/home
    # that is used to run osc commands
      run: |
        /scripts/init_osc_creds.sh
        mkdir -p $HOME/.config/osc
        cp /root/.config/osc/oscrc $HOME/.config/osc
    - name: Prepare trento.changes file
      run: |
        VERSION=$(./hack/get_version_from_git.sh)
        TAG=$(echo $VERSION | cut -f1 -d+)
        hack/gh_release_to_obs_changeset.py $REPOSITORY -a shap-staff@suse.de -t $TAG -f $FOLDER/trento.changes
    - name: prepare _service file
      run: |
        VERSION=$(./hack/get_version_from_git.sh)
        sed -i 's~%%REVISION%%~${{ github.sha }}~' $FOLDER/_service && \
        sed -i 's~%%REPOSITORY%%~${{ github.repository }}~' $FOLDER/_service && \
        sed -i 's~%%VERSION%%~'"${VERSION}"'~' $FOLDER/_service
    - name: commit changes into OBS
      run: cp $FOLDER/_service . && /scripts/upload.sh

  obs-submit:
    needs: obs-commit
    runs-on: ubuntu-18.04
    if: github.event.release
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
      env:
        OBS_USER: ${{ secrets.OBS_USER }}
        OBS_PASS: ${{ secrets.OBS_PASS }}
        OBS_PROJECT: ${{ secrets.OBS_PROJECT }}
        TARGET_PROJECT: ${{ secrets.TARGET_PROJECT }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: configure OSC
      run: |
        /scripts/init_osc_creds.sh
        mkdir -p $HOME/.config/osc
        cp /root/.config/osc/oscrc $HOME/.config/osc
    - name: prepare _service file
      run: |
        VERSION=$(./hack/get_version_from_git.sh)
        sed -i 's~%%REVISION%%~${{ github.sha }}~' $FOLDER/_service && \
        sed -i 's~%%REPOSITORY%%~${{ github.repository }}~' $FOLDER/_service && \
        sed -i 's~%%VERSION%%~'"${VERSION}"'~' $FOLDER/_service
    - name: submit package
      run: cp $FOLDER/_service . && /scripts/submit.sh

  ibs-commit:
    needs: test
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
      env:
        OBS_USER: ${{ secrets.IBS_USER }}
        OBS_PASS: ${{ secrets.IBS_PASS }}
        OBS_PROJECT: ${{ secrets.IBS_PROJECT }}        
        GITHUB_OAUTH_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: configure OSC
    # OSC credentials must be configured beforehand as the HOME variables cannot be changed from /github/home
    # that is used to run osc commands
      run: |
        /scripts/init_osc_creds.sh
        mkdir -p $HOME/.config/osc
        cp /root/.config/osc/oscrc $HOME/.config/osc
    - name: Prepare trento.changes file
      run: |
        VERSION=$(./hack/get_version_from_git.sh)
        TAG=$(echo $VERSION | cut -f1 -d+)
        hack/gh_release_to_obs_changeset.py $REPOSITORY -a shap-staff@suse.de -t $TAG -f $FOLDER/trento.changes
    - name: prepare _service file
      run: |
        VERSION=$(./hack/get_version_from_git.sh)
        sed -i 's~%%REVISION%%~${{ github.sha }}~' $FOLDER/_service && \
        sed -i 's~%%REPOSITORY%%~${{ github.repository }}~' $FOLDER/_service && \
        sed -i 's~%%VERSION%%~'"${VERSION}"'~' $FOLDER/_service
    - name: commit changes into OBS
      run: cp $FOLDER/_service . && /scripts/upload.sh

  ibs-submit:
    needs: ibs-commit
    runs-on: ubuntu-18.04
    if: github.event.release
    container:
      image: ghcr.io/trento-project/continuous-delivery:master
      env:
        OBS_USER: ${{ secrets.IBS_USER }}
        OBS_PASS: ${{ secrets.IBS_PASS }}
        OBS_PROJECT: ${{ secrets.IBS_PROJECT }}
        TARGET_PROJECT: ${{ secrets.IBS_TARGET_PROJECT }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: configure OSC
      run: |
        /scripts/init_osc_creds.sh
        mkdir -p $HOME/.config/osc
        cp /root/.config/osc/oscrc $HOME/.config/osc
    - name: prepare _service file
      run: |
        VERSION=$(./hack/get_version_from_git.sh)
        sed -i 's~%%REVISION%%~${{ github.sha }}~' $FOLDER/_service && \
        sed -i 's~%%REPOSITORY%%~${{ github.repository }}~' $FOLDER/_service && \
        sed -i 's~%%VERSION%%~'"${VERSION}"'~' $FOLDER/_service
    - name: submit package
      run: cp $FOLDER/_service . && /scripts/submit.sh